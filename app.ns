(*******************************************************************************
* Conversion of the JS implementation at https://github.com/acmeair/acmeair-nodejs
* to SOMns.
*
* Copyright (c) 2015 IBM Corp.
* Copyright (c) 2018 Dominik Aumayr
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*******************************************************************************)

class AcmeAir usingPlatform: platform = Value (
  |
    private http = platform http.
    private actors = platform actors.
    private ObjectMirror = platform mirrors ObjectMirror.
    private JSON = (platform system loadModule: 'JSON.ns' nextTo: self) usingPlatform: platform.
    private Loader = (platform system loadModule: '/loader/Loader.ns' nextTo: self) usingPlatform: platform andJSON: JSON.
    private DataAccess = (platform system loadModule: 'DataAccess.ns' nextTo: self) usingPlatform: platform andJSON: JSON andLoader: Loader.
    private Routes = (platform system loadModule: 'Routes.ns' nextTo: self) usingPlatform: platform dataAccess: DataAccess andJSON: JSON andLoader: Loader.

    private FilePath = platform files FilePath.
    private Dictionary = platform collections Dictionary.
    private System = platform system.
    private platform = platform.

  |
) (

  public class Application = (
    |
    private modulePath = (ObjectMirror reflecting: self) classMirror classDefinition filePath.
    private root = (FilePath for: modulePath) containingDirectory pattern.
    settings = readSettings.
    authService
    authServiceLocation = 'authservice/routes'.
    authModule
    routes
    loader
    server
    (*Only initialize DB after initialization of the authService is done*)
    initialized ::= false.
    serverStarted ::= false.
    host = 'localhost'.
    port = settings at: #port.
    public clearDB ::= false.
  |
    (*var authServiceLocation = process.env.AUTH_SERVICE;*)
    (*var settings = JSON.parse(fs.readFileSync('settings.json', 'utf8'));*)
    (* disable process.env.PORT for now as it cause problem on mesos slave*)
    (*var port = (process.env.VMC_APP_PORT || process.env.VCAP_APP_PORT || settings.port);*)
    (*var host = (process.env.VCAP_APP_HOST || 'localhost');*)

    ('host:port==' + host + ':' + port) println.
  )(

    public work = (
      |contextRoot|
      (*
      we don't implement fancy microservices for now
      authServiceLocation = nil ifFalse: [
        ('Use authservice:' + authServiceLocation) println.

        (authServiceLocation indexOf: ':') > 0 ifTrue: [
          (*This is to use micro services*)
          authModule:: 'acmeairhttp'.
        ] ifFalse: [
          authModule:: authServiceLocation.
        ].

        authService:: (System loadModule: ('/'+authModule+'/authService.ns') nextTo: self) settings: settings dataAccess: DataAccess.

        (* ignore hystrix for now
        (authService = nil) not && enableHystrix ifTrue: [
          'Enabled Hystrix' println.
          authService:: (system loadModule: './acmeaircmd/index.js' nextTo: self) usingPlatform: platform authService: authService withSettings: settings.
        ]*)
      ].*)

      routes:: (Routes Routes) new: authService settings: settings.
      loader:: (Loader Loader) new: routes.
      server:: (http Server) create: host port: port.


      (* just a reminder
      var bodyParser     = require('body-parser')
      var methodOverride = require('method-override');
      var cookieParser = require('cookie-parser')*)

      (*parse JSON request body, url encoded, and html is parsed as text


      application/x-www-form-urlencoded
      application/json
      text/html
      *)

      (*set the static files location /public/img will be /img for users*)
      server <-: static: '/' with: ( root + '/public/').


      (*set up routing of requests*)
      contextRoot:: (settings at: #contextRoot).
      server <-: route: (contextRoot + '/login') with: #POST to: login.
      server <-: route: (contextRoot + '/login/logout') with: #GET to: logout.
      server <-: route: (contextRoot + '/flights/queryflights') with: #POST to: (routes checkForValidSessionCookie).
      server <-: route: (contextRoot + '/flights/queryflights') with: #POST to: (routes queryflights).
      server <-: route: (contextRoot + '/bookings/bookflights') with: #POST to: (routes checkForValidSessionCookie).
      server <-: route: (contextRoot + '/bookings/bookflights') with: #POST to: (routes bookflights).
      server <-: route: (contextRoot + '/bookings/cancelbooking') with: #POST to: (routes checkForValidSessionCookie).
      server <-: route: (contextRoot + '/bookings/cancelbooking') with: #POST to: (routes cancelBooking).

      server <-: route: (contextRoot + '/bookings/byuser/:user') with: #GET to: (routes checkForValidSessionCookie).
      server <-: route: (contextRoot + '/bookings/byuser/:user') with: #GET to: (routes bookingsByUser).
      server <-: route: (contextRoot + '/customer/byid/:user') with: #GET to: (routes checkForValidSessionCookie).
      server <-: route: (contextRoot + '/customer/byid/:user') with: #GET to: (routes getCustomerById).
      server <-: route: (contextRoot + '/customer/byid/:user') with: #POST to: (routes checkForValidSessionCookie).
      server <-: route: (contextRoot + '/customer/byid/:user') with: #POST to: (routes putCustomerById).
      server <-: route: (contextRoot + '/config/runtime') with: #GET to: (routes getRuntimeInfo).
      server <-: route: (contextRoot + '/config/dataServices') with: #GET to: (routes getDataServiceInfo).

      server <-: route: (contextRoot + '/config/activeDataService') with: #GET to: (routes getActiveDataServiceInfo).
      server <-: route: (contextRoot + '/config/countBookings') with: #GET to: (routes countBookings).
      server <-: route: (contextRoot + '/config/countCustomers') with: #GET to: (routes countCustomer).
      server <-: route: (contextRoot + '/config/countSessions') with: #GET to: (routes countCustomerSessions).
      server <-: route: (contextRoot + '/config/countFlights') with: #GET to: (routes countFlights).

      server <-: route: (contextRoot + '/config/countFlightSegments') with: #GET to: (routes countFlightSegments).
      server <-: route: (contextRoot + '/config/countAirports') with: #GET to: (routes countAirports).
      server <-: route: (contextRoot + '/loader/load') with: #GET to: startLoadDatabase.
      server <-: route: (contextRoot + '/loader/query') with: #GET to: (loader getNumConfiguredCustomers).
      server <-: route: (contextRoot + '/checkstatus') with: #GET to: checkStatus.

      (*authService && (authService hystrixStream) ifTrue:[
        server route: ('/rest/api/hystrix.stream') with: #GET to: authService hystrixStream.
      ].*)


      initDB.
    )

    public checkStatus = (
      ^ [ :exch |
        exch sendResponseStatus: 200.
      ]
    )

    public login = (
      ^ [ :exch |
        initialized ifTrue: [
          routes login: exch.
        ] ifFalse: [
          'please wait for db connection initialized then trigger again.' println.
          initDB.
          exch sendResponseStatus: 403.
        ]
      ]
    )

    public logout = (
      ^ [ :exch |
        initialized ifTrue: [
          routes logout: exch.
        ] ifFalse: [
          'please wait for db connection initialized then trigger again.' println.
          initDB.
          exch sendResponseStatus: 400.
        ]
      ]
    )

    public startLoadDatabase = (
      ^ [ :exch |
        initialized ifTrue: [
          loader startLoadDatabase: exch.
        ] ifFalse: [
          'please wait for db connection initialized then trigger again.' println.
          initDB.
          exch sendResponseStatus: 400.
        ]
      ]
    )

    public initDB = (
      initialized ifTrue: [ ^ self ].

      routes initializeDatabaseConnections: clearDB callback: [ :error |
        error ifNil: [
          initialized:: true.
        ] ifNotNil: [
          ('Error connecting to database - exiting process: ' + error) println.
          (*Do not stop the process for debug in container service
          process.exit(1);*)
        ].
        ('Initialized database connections') println.

        startServer.
      ]
    )

    public startServer = (
      serverStarted ifTrue: [ ^ self ].
      serverStarted:: true.
      server <-: start.
      ('Server listening on port ' + port) println.
    )

    readSettings = (
      | cis |
      cis::  (FilePath for: (root + '/settings.json')) charInputStream.
      ^ (JSON JSONParser parse: (cis next: (cis size))).
    )
  )

  public main: args = (
    |acme pp|
    pp:: actors createPromisePair.
    acme:: self Application new.
    (args contains: '-clearDB') ifTrue: [
      acme clearDB: true.
    ].

    acme work.
    ^ pp promise.
  )
)


